const API_URL = import.meta.env.VITE_API_URL || "http://localhost:3001/api";
import type { PrescriptionJson, IA3Cotation } from '../../types';

export async function interpreterPrescription(
  texte_prescription: string
): Promise<{
  texte_interprete: string;
  json_structur√©: PrescriptionJson;
  cotations_ngap: IA3Cotation[];
}> {
  console.log("üì° Appel √† interpreterPrescription");

  let res: Response;

  try {
    res = await fetch(`${API_URL}/interpreter`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ texte_prescription })
    });
    console.log("üì• R√©ponse re√ßue du backend");
  } catch (e) {
    console.error("üí• Erreur r√©seau :", e);
    throw new Error("Impossible de contacter le serveur.");
  }

  if (!res.ok) {
    const errText = await res.text();
    console.error("üí• Erreur HTTP :", res.status, errText);
    throw new Error(errText || `Erreur HTTP ${res.status}`);
  }

  const contentType = res.headers.get("content-type");
  console.log("üßæ Header content-type :", contentType);

  let rawText = '';
  try {
    rawText = await res.text();
    console.log("üì¶ R√©ponse texte brute :", rawText);
  } catch (e) {
    console.error("üí• √âchec lors de la lecture du corps r√©ponse :", e);
    throw new Error("Impossible de lire la r√©ponse du serveur");
  }

  let data: unknown;
  try {
    data = JSON.parse(rawText);
    console.log("‚úÖ JSON pars√© avec succ√®s");
  } catch (e) {
    console.error("üí• Erreur de parsing JSON :", e);
    throw new Error("R√©ponse du serveur illisible (non-JSON)");
  }

  const d = data as Record<string, unknown>;

  if (
    typeof d.texte_interprete !== 'string' ||
    typeof d.json_structur√© !== 'object' ||
    !Array.isArray(d.cotations_ngap)
  ) {
    console.error("‚ùå Structure inattendue :", d);
    throw new Error("Donn√©es manquantes ou corrompues dans la r√©ponse.");
  }

  const typedData = d as {
    texte_interprete: string;
    json_structur√©: PrescriptionJson;
    cotations_ngap: IA3Cotation[];
  };

  return {
    texte_interprete: typedData.texte_interprete,
    json_structur√©: typedData.json_structur√©,
    cotations_ngap: typedData.cotations_ngap
  };
}
